create schema sublanguages;

-- This is a line comment
-- ctr+/

/*This is a block comment
 * 
 * ctr+shift+/
 * 
 * If you are in VS Code and want to do a similar short cut for a block comment that would be alt+shift+A
 */

 -- this is a single line comment even on a Mac it is Ctrl + /

/*
 * This is a block comment Ctrl + Sh + / even on a Mac
 */

 /*
 * What is SQL?
 * 		- Structured Query Language
 *		- It is a language designed for manipulating relational database (tables and their relationships)
 *
 * What is a DBMS?
 * 		- Database Management System.
 * 		- We are using Microsoft SQL Server
 * 		- The flavor of SWL we are using is called tsql
 * 
 * There are 5 sublanguages of SQL: (Popular QC question)
 * 		- DDL
 * 			- Data Definition Language
 * 			- deals with manipulating the table structures
 * 			- keywords: create, alter, drop, truncate
 * 		- DML
 * 			- Data Manipulation Language
 * 			- deals with manipulating the records within the table
 * 			- keywords: insert, update, delete
 * 		- DQL
 * 			- Data Query Language
 * 			- deals with retrieving information from the database
 * 			- keyword: select (select always returns a results set)
 * 		- DCL
 * 			- Data Control Language
 * 			- deals with granting and revoking access to database and schemas
 * 			- keywords: grant, revoke
 * 		- TCL
 * 			- Transaction Control Language
 * 			- deals with making official commits to the database
 * 			- commit, rollback, savepoint
 * 
 * 	What is a transaction?
 * 		- its an official commit to the database
 * 2 inserts 2 updates 4 deletes
 *
 * ACID
 * 	- Atomicity: transactions are atomic - all or nothing, if there is an error NONE of the commands happen
 * 	- Consistency: all onstraints are enforced
 * 	- Isolation: transactions can't interfere with each other
 * 	- Durability: once a commit happens, that is the new state of the database, there's never a mix of new and old data
 *
 */

/* DDL
 * 
 * What are the datatypes of sql? (This will not be an exhaustive list...)
 * 	- varchar(50): utilize for strings
 * 	- double precision: used for decimals: equivalent of defining a double in C#
 * 	- money: used for money who would have guessed
 *  - date: provides a date 
 *  - bit: true/false
 * 
 * What is a constraint?
 * 	- rules a column must follow
 * 
 * What are some constraints we can use?
 * 	- unique: The value needs to be unique within the column (only 1 unique entry per column)
 * 	- not null: you must have a value for that specfic column
 * 	- default: if a value is not inserted, we can define a default value to be inputted
 */ 
create table sublanguage.users(
	username varchar(50) unique
);
--unique is an example of a constraint. You can only use this for table creation
 
create table sublanguage.users(
    username varchar(50) unique not null,
    password varchar(50) not null
    age int, --since I didn't add a constraint, this value can be null
    net_worth double precision --equivalent to a double in C#
    date_created date default getdate()
);

/* 
 * What is a primary key?
 *  - its a unique identifier for a record/row in a table
 * 	- implicitly unique and not null
 * There are 3 different types of primary key:
 * 	- natural key: unique identifier that is generated outside of the database
 * 		-examples: username, ssn, phone number, email
 * 	- surrogate keys: autogenerated from inside of the database
 * 		-there is a constraint called identity that generates a unique number
 *  - composite keys: 
 * 		- unique identifier from the combination of 2 or more columns
 */


create table sublanguages.users(
	username varchar(50) unique not null,
	password varchar(50) not null,
	age int,
	net_worth double precision not null,
	date_created date default getdate(),
	primary key(username)
);

-- Above originally had a "like_cilantro" column but now want to remove it
--The constraint is found by running the second command and copy-pasting the specified constraint in the error msg
alter table sublanguages.users drop constraint DF__users__like_cila__42E1EEFE;
alter table sublanguages.users drop column like_cilantro;

--To view all of a table use the following command, you can replace the star with the name of a column as well to just see that column
select * from sublanguages.users;

insert into sublanguages.users (username, password, net_worth) values ('kev123', 'fluffybunny123', 1000000.65);
insert into sublanguages.users (username, password, net_worth) values ('jane123', 'fluffybunny123', 32.00);

update sublanguages.users set age = 45, password = 'pass123' where username = 'kev123';

-- delete from sublanguages.users user where username = 'kev123';

-- Use the drop keyword to remove a table
drop table sublanguages.users;

drop table sublanguages.posts;

create table sublanguages.posts(
	post_id int identity,
	content varchar(255) not null,
	user_fk varchar(50) foreign key references sublanguages.users(username),
	primary key(post_id)
);

insert into sublanguages.posts (content, user_fk) values ('This is my dope content', 'kev123');
insert into sublanguages.posts (content, user_fk) values ('my car is pretty dope too', 'kev123');
insert into sublanguages.posts (content, user_fk) values ('my first awesome post', 'jane123');
insert into sublanguages.posts (content, user_fk) values ('my second awesome post', 'jane123');

select * from sublanguages.posts;

create table sublanguages.likes(
	post_fk int foreign key references sublanguages.posts(post_id),
	user_fk varchar(50) foreign key references sublanguages.users(username),
	primary key (post_fk, user_fk)
);

select * from sublanguages.posts;

-- drop table sublanguages.posts;

insert into sublanguages.likes (post_fk, user_fk) values (1, 'jane123');


/*
 * Multiplicity
 * 
 * - relationship between two tables
 *     - one to one
 *     - one to many
 * 	       - the "many" table has a foreign key to the primary key of the "one" table
 *     - many to one
 * 	       - the "many" table has a foreign key to the primary key of the "one" table
 *     - many to many
 * 		   - you need to create an external table called a junction table
 * 
 * user, 	posts
 * 
 * 
 * */

